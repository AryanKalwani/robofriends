{"version":3,"sources":["components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBox.js","reducers.js","constants.js","containers/App.js","actions.js","serviceWorker.js","index.js"],"names":["card","name","email","id","className","alt","src","CardList","robots","cardComponent","map","user","i","Card","key","Scroll","props","style","overflowY","border","height","children","SearchBox","searchChange","type","placeholder","onChange","initialStateSearch","searchField","searchRobots","state","action","Object","assign","payload","initialStateRobots","isPending","error","App","this","onRequestRobots","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","Component","connect","requestRobots","dispatch","event","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","logger","createLogger","rootReducer","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.609f5d2d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst card = ({name,email,id}) => {\r\n\treturn(\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\tconst cardComponent=robots.map((user,i)=>{\r\n\t\treturn <Card \r\n\t\tkey={i} \r\n\t\tid={robots[i].id} \r\n\t\tname={robots[i].name} \r\n\t\temail={robots[i].email}\r\n\t\t />\r\n\t})\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t{cardComponent}\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) =>{\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t\t<input \r\n\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\t\ttype='search' \r\n\t\t\tplaceholder='search robots'\r\n\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t\t);\r\n}\r\nexport default SearchBox;","import { CHANGE_SEARCH_FIELD,\r\n\t\t REQUEST_ROBOTS_PENDING,\r\n\t\t REQUEST_ROBOTS_SUCCESS,\r\n\t\t REQUEST_ROBOTS_FAILED } \r\n\t\t from './constants.js'\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n\tswitch(action.type){\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({}, state, { searchField: action.payload });\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror:''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n\tswitch(action.type){\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({}, state, { isPending: true})\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, { robots: action.payload, isPending: false})\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({}, state, { error: action.payload, isPending: false})\t\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","export const CHANGE_SEARCH_FIELD= 'CHANGE_SEARCH_FIELD'\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'","import React, { Component } from 'react'; \r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport Scroll from '../components/Scroll';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport { searchRobots } from '../reducers';\r\n\r\nimport { setSearchField, requestRobots } from '../actions'\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tsearchField: searchRobots(state.searchRobots.searchField),\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(requestRobots())\r\n\t}\r\n}\r\n\r\nclass App extends Component {\r\n\t\r\n\r\n\tcomponentDidMount(){\r\n\t\tthis.props.onRequestRobots();\r\n\t}\r\n\r\n\t\r\n\trender(){\r\n\t\t const { searchField,onSearchChange,robots,isPending }=this.props;\r\n\t\t const filteredRobots = robots.filter(robot => {\r\n\t\t \treturn robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n\t\t })\r\n\t\t if (isPending === true) {\r\n\t\t \treturn <h1 className='tc'>Loading</h1>\r\n\t\t }\r\n\t\t else {\r\n\t\t return(\r\n\t\t\t<div className='tc'>\r\n\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t<SearchBox searchChange={onSearchChange}/>\r\n\t\t\t<Scroll>\r\n\t\t\t\t<CardList robots = { filteredRobots }/>  \r\n\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t       );\t\r\n\t\t }\r\n\t\t\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD,\r\n\t\t REQUEST_ROBOTS_PENDING,\r\n\t\t REQUEST_ROBOTS_SUCCESS,\r\n\t\t REQUEST_ROBOTS_FAILED } \r\n\t\t from './constants.js'\r\n\r\nexport const setSearchField = (text) => ({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) =>{\r\n\tdispatch({ type: REQUEST_ROBOTS_PENDING})\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then(response => {\r\n\t\t\t\treturn response.json();\r\n\t\t\t})\r\n\t\t\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload:data}))\r\n\t\t\t.catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload:error }))\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducer,applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\t\n\t</Provider>\n\t,document.getElementById('root')\t\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}